# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'ui/ChatStartDialog.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtCore import QObject, QThread, pyqtSignal
import threading, time 

class Worker(QObject):
    finished = pyqtSignal()
    progress = pyqtSignal(int)

    def run(self):
        """Long-running task."""
        for i in range(5):
            sleep(1)
            self.progress.emit(i + 1)
        self.finished.emit()


class Ui_MainWindow(object):
    def updateStatus(self):
        while True:
            
            self.Client.getOnline()
            self.listWidget.clear()
            self.listWidget_2.clear()
            self.listWidget.addItem('Online Users:')
            self.listWidget_2.addItem('Offline Users:')
            
            onlines = self.Client.OnlinePersons.split('-')[0]
            offlines = self.Client.OnlinePersons.split('-')[1]
            for on in onlines.split(','):
                self.listWidget.addItem(on)
                if on in list(self.Threads.keys()):
                    if not self.Threads[on].is_alive():
                        self.Threads[on] = threading.Thread(target=self.recv, args=(on,))
                        self.Threads[on].start()
                else:
                    self.Threads[on] = threading.Thread(target=self.recv, args=(on,))
                    self.Threads[on].start()
                
            for of in offlines.split(','):
                self.listWidget_2.addItem(of)
            time.sleep(5)
    def OnChat(self, ID):
        self.setTab(ID)
    def rec(self):
        while True:
            for connected in self.Client.msg.keys:
                if connected == 'Server':
                    if self.Client.Online != self.Online:
                        self.Online = self.Client.Online
                        self.Offline = self.Client.Offline
                        self.UpdateStatus()
                if len(self.Client.msg[connected]) > 0:
                    if direction in list(self.TabHolder.keys()):
                        self.TabHolder[direction]['commWindow'].addItem(self.Client.msg[direction].pop())
                    else:
                        self.TabHolder[direction] = {}
                        self.OnChat(direction)

                        self.TabHolder[direction]['Ok'] = True
                else:
                    time.sleep(0.1)
    def recv(self, direction):
        while direction in [str(self.listWidget.item(i).text()) for i in range(self.listWidget.count())]:
            if direction in self.Client.msg.keys():
                
                if len(self.Client.msg[direction]) > 0:
                    if direction in list(self.TabHolder.keys()):
                        self.TabHolder[direction]['commWindow'].addItem(direction + ': ' + self.Client.msg[direction].pop())
                    else:
                        self.TabHolder[direction] = {}
                        self.NeededSetups.append(direction)
                        self.trick.click()
                        time.sleep(0.7)
                        #self.OnChat(direction)

                        #self.TabHolder[direction]['Ok'] = True
                else:
                    time.sleep(0.1)
            else:
                self.Client.msg[direction] = []
    def sendMessage(self):
        direction = self.lineEdit.text()
        print(direction)
        msg = self.lineEdit_2.text()
        print(msg)
        print('Do Something')
        self.lineEdit_2.setText("")
        self.lineEdit.setText("")
        self.MainWindow.repaint()
        self.Client.flush(self.Client.WrappedSock, direction + ',' + msg)
        if direction in list(self.TabHolder.keys()):
            if 'Ok' in list(self.TabHolder[direction].keys()):
                if not self.TabHolder[direction]['Ok']:
                    self.OnChat(direction)
                    self.TabHolder[direction]['Ok'] = True
                else:
                    pass
        else:
            self.TabHolder[direction] = {}
            self.OnChat(direction)
            
            self.TabHolder[direction]['Ok'] = True
        self.TabHolder[direction]['commWindow'].addItem('Me' + ': ' + msg)
    def flushClient(self, msg, direction):
        if direction in list(self.TabHolder.keys()):
                        #self.TabHolder[direction]['commWindow'].addItem(direction + ': ' + self.Client.msg[direction].pop())
                        pass
        else:
        self.TabHolder[direction] = {}
        self.NeededSetups.append(direction)
        self.trick.click()
        time.sleep(0.7)
        self.Client.flush(self.Client.WrappedSock, direction + ',' + msg)
        self.TabHolder[direction]['commWindow'].addItem('Me: ' + msg)
        self.TabHolder[direction]['chat'].clear()
    def flushAll(self, msg, ID):
        onlines = [self.flushClient(msg, person) for person in self.Client.OnlinePersons.split('-')[0].split(',') if person != self._id]
        self.TabHolder[direction]['chat'].clear()
    def setTab(self, ID):
        print('setting tab for', ID)
        #_translate = QtCore.QCoreApplication.translate
        self.TabHolder[ID]['tab'] = QtWidgets.QWidget()
        self.TabHolder[ID]['tab'].setObjectName("tab" + ID)
        self.TabHolder[ID]['send'] = QtWidgets.QPushButton(self.TabHolder[ID]['tab'])
        self.TabHolder[ID]['send'].setGeometry(QtCore.QRect(430, 170, 131, 31))
        self.TabHolder[ID]['send'].setObjectName("pushButton" + ID)
        self.TabHolder[ID]['send'].clicked.connect(lambda : self.flushClient(self.TabHolder[ID]['chat'].text(), ID))
        
        self.TabHolder[ID]['sendall'] = QtWidgets.QPushButton(self.TabHolder[ID]['tab'])
        self.TabHolder[ID]['sendall'].setGeometry(QtCore.QRect(560, 170, 121, 31))
        self.TabHolder[ID]['sendall'].setObjectName("pushButton" + ID)
        self.TabHolder[ID]['sendall'].clicked.connect(lambda : self.flushAll(self.TabHolder[ID]['chat'].text(), ID))
        
        self.TabHolder[ID]['commWindow'] = QtWidgets.QListWidget(self.TabHolder[ID]['tab'])
        self.TabHolder[ID]['commWindow'].setGeometry(QtCore.QRect(0, 0, 681, 171))
        self.TabHolder[ID]['commWindow'].setStyleSheet("background-color: rgb(0, 0, 0);\n"
"color: rgb(0, 255, 0);")
        self.TabHolder[ID]['commWindow'].setObjectName("listWidget" + ID)
        self.TabHolder[ID]['chat'] = QtWidgets.QLineEdit(self.TabHolder[ID]['tab'])
        self.TabHolder[ID]['chat'].setGeometry(QtCore.QRect(0, 170, 431, 31))
        self.TabHolder[ID]['chat'].setObjectName("lineEdit" + ID)
        self.tabWidget.addTab(self.TabHolder[ID]['tab'], "")
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.TabHolder[ID]['tab']),  ID)
        self.TabHolder[ID]['send'].setText( "Send")
        self.TabHolder[ID]['sendall'].setText("Send All")
    def __init__(self, client, _super):
        self.Client = client
        self.TabHolder = {}
        self.Threads = {}
        self._id = _super
        self.Online = []
        self.NeededSetups = []
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(800, 600)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        
        self.listWidget = QtWidgets.QListWidget(self.centralwidget)
        self.listWidget.setGeometry(QtCore.QRect(0, 0, 111, 251))
        self.listWidget.setStyleSheet("color: rgb(0, 170, 0);")
        self.listWidget.setObjectName("listWidget")
        item = QtWidgets.QListWidgetItem()
        self.listWidget.addItem(item)
        item = QtWidgets.QListWidgetItem()
        self.listWidget.addItem(item)
        self.pushButton = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton.setGeometry(QtCore.QRect(700, 520, 101, 41))
        self.pushButton.setObjectName("pushButton")
        
        self.trick = QtWidgets.QPushButton(self.centralwidget)
        self.trick.setGeometry(QtCore.QRect(700, 700, 650, 650))
        self.trick.setObjectName("trick")
        self.trick.hide()
        
        
        self.listWidget_2 = QtWidgets.QListWidget(self.centralwidget)
        self.listWidget_2.setGeometry(QtCore.QRect(0, 250, 111, 301))
        self.listWidget_2.setObjectName("listWidget_2")
        item = QtWidgets.QListWidgetItem()
        self.listWidget_2.addItem(item)
        self.tabWidget = QtWidgets.QTabWidget(self.centralwidget)
        self.tabWidget.setGeometry(QtCore.QRect(110, 0, 681, 231))
        self.tabWidget.setObjectName("tabWidget")
        self.lineEdit = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit.setGeometry(QtCore.QRect(450, 370, 311, 21))
        self.lineEdit.setText("")
        self.lineEdit.setObjectName("lineEdit")
        self.pushButton_2 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_2.setGeometry(QtCore.QRect(450, 430, 181, 23))
        self.pushButton_2.setObjectName("pushButton_2")
        self.lineEdit_2 = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_2.setGeometry(QtCore.QRect(450, 400, 311, 21))
        self.lineEdit_2.setText("")
        self.lineEdit_2.setObjectName("lineEdit_2")
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(160, 360, 281, 41))
        self.label.setObjectName("label")
        self.label_2 = QtWidgets.QLabel(self.centralwidget)
        self.label_2.setGeometry(QtCore.QRect(160, 400, 261, 16))
        self.label_2.setObjectName("label_2")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 800, 20))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        threading.Thread(target=self.updateStatus).start()
        
        self.retranslateUi(MainWindow)
        self.tabWidget.setCurrentIndex(1)
        #self.tabWidget.hide()
        self.pushButton.clicked.connect(self.sendMessage)
        self.pushButton_2.clicked.connect(lambda : self.sendMessage())
        self.trick.clicked.connect(lambda : self.setTab(self.NeededSetups.pop()))
        print(self)
        '''self.pushButton.setText("Log Out")
        __sortingEnabled = self.listWidget.isSortingEnabled()
        
        self.listWidget.setSortingEnabled(False)
        item = self.listWidget.item(0)
        item.setText("Online Users:")
        self.MainWindow = MainWindow
        
        __sortingEnabled = self.listWidget_2.isSortingEnabled()
        self.listWidget_2.setSortingEnabled(False)
        item = self.listWidget_2.item(0)
        item.setText("Offline Users:")
        self.listWidget_2.setSortingEnabled(__sortingEnabled)
        
        self.pushButton_2.setText( "Start Conversation")
        self.label.setText("Enter user ID of whom to start Conversation: ")
        self.label_2.setText("Message: ")'''
        self.test()
        QtCore.QMetaObject.connectSlotsByName(MainWindow)
        
        self.MainWindow = MainWindow
        print('Hi')
        
    def run(self):
        while True:
            if len(self.NeededSetups) > 0:
                direction = self.NeededSetups.pop(0)
                self.OnChat(direction)
                self.TabHolder[direction]['Ok'] = True
            else:
                time.sleep(0.2)
    def test(self):
        print('why', self.lineEdit.text())
    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        __sortingEnabled = self.listWidget.isSortingEnabled()
        self.listWidget.setSortingEnabled(False)
        item = self.listWidget.item(0)
        item.setText(_translate("MainWindow", "Online Users:"))
        self.listWidget.setSortingEnabled(__sortingEnabled)
        self.pushButton.setText(_translate("MainWindow", "Log Out"))
        __sortingEnabled = self.listWidget_2.isSortingEnabled()
        self.listWidget_2.setSortingEnabled(False)
        item = self.listWidget_2.item(0)
        item.setText(_translate("MainWindow", "Offline Users:"))
        self.listWidget_2.setSortingEnabled(__sortingEnabled)
        
        #self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab), _translate("MainWindow", "Tab 1"))
        #self.pushButton_6.setText(_translate("MainWindow", "Send"))
        #self.pushButton_7.setText(_translate("MainWindow", "Send All"))
        #self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab_2), _translate("MainWindow", "Page"))
        self.pushButton_2.setText(_translate("MainWindow", "Start Conversation"))
        self.label.setText(_translate("MainWindow", "Enter user ID of whom to start Conversation: "))
        self.label_2.setText(_translate("MainWindow", "Message: "))


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
